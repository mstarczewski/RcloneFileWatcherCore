name: Build & Release

on:
  push:
    tags:
      - 'v*.*'
    branches:
      - master  # TYMCZASOWO - usuń po testach
  workflow_dispatch:
    inputs:
      tag:
        description: 'Optional tag name'
        required: false
        default: ''

jobs:
  build-windows:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout repo with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Publish Windows app
        run: dotnet publish RcloneFileWatcherCore/RcloneFileWatcherCore.csproj -c Release -r win-x64 --self-contained false /p:PublishSingleFile=true

      - name: Prepare Windows artifacts
        run: |
          mkdir artifacts
          copy "RcloneFileWatcherCore\bin\Release\net8.0\win-x64\publish\*.exe" "artifacts\"
          Compress-Archive -Path "artifacts\*" -DestinationPath "artifacts\app-win-x64.zip"

      - name: Extract version from assembly
        id: extract_version
        run: |
          $assemblyPath = "RcloneFileWatcherCore\bin\Release\net8.0\win-x64\publish\RcloneFileWatcherCore.exe"
          $version = [System.Diagnostics.FileVersionInfo]::GetVersionInfo($assemblyPath).ProductVersion
          echo "Extracted version: $version"
          echo "version=$version" >> $env:GITHUB_OUTPUT
        shell: powershell

      - name: Generate changelog
        id: changelog
        shell: bash
        run: |
          git fetch --tags
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$latest_tag" ]; then
            log=$(git log --oneline -10 | grep -E '(feat|fix|BREAKING CHANGE):' || echo "No feature/fix commits found")
          else
            log=$(git log "$latest_tag"..HEAD --oneline | grep -E '(feat|fix|BREAKING CHANGE):' || echo "No feature/fix commits found")
          fi
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$log" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: artifacts/

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Publish Linux app
        run: dotnet publish RcloneFileWatcherCore/RcloneFileWatcherCore.csproj -c Release -r linux-x64 --self-contained false /p:PublishSingleFile=true

      - name: Prepare Linux artifacts
        run: |
          mkdir artifacts
          cp RcloneFileWatcherCore/bin/Release/net8.0/linux-x64/publish/* artifacts/
          cd artifacts && tar -czf app-linux-x64.tar.gz * && cd ..

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts
          path: artifacts/

  release:
    needs: [build-windows, build-linux]
    runs-on: ubuntu-latest
    steps:
      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-artifacts
          path: windows-artifacts/

      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-artifacts
          path: linux-artifacts/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.build-windows.outputs.version }}
          name: Release ${{ needs.build-windows.outputs.version }}
          draft: true  # Tymczasowo jako draft dla testów
          body: |
            ### Changes since last release
            ${{ needs.build-windows.outputs.changelog }}
            
            ### Assembly Version
            `${{ needs.build-windows.outputs.version }}`
            
            ### Downloads
            - **Windows x64**: `app-win-x64.zip`
            - **Linux x64**: `app-linux-x64.tar.gz`
          files: |
            windows-artifacts/*.exe
            windows-artifacts/app-win-x64.zip
            linux-artifacts/app-linux-x64.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
