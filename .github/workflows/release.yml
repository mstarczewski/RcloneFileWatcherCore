name: Build & Release

on:
  push:
    tags:
      - 'v*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Optional tag name'
        required: false
        default: ''

jobs:
  build:
    strategy:
      matrix:
        runtime: [win-x64, linux-x64]
    runs-on: ${{ contains(matrix.runtime, 'win-') && 'windows-latest' || 'ubuntu-latest' }}
    env:
      Configuration: Release

    steps:
      - name: Checkout repo with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore
        run: dotnet restore

      - name: Build solution
        run: dotnet build --no-restore -c ${{ env.Configuration }} -r ${{ matrix.runtime }}

      - name: Run tests
        shell: bash
        run: dotnet test RcloneFileWatcherCore.Tests/RcloneFileWatcherCore.Tests.csproj --no-build -c ${{ env.Configuration }}

      - name: Publish app
        run: dotnet publish RcloneFileWatcherCore/RcloneFileWatcherCore.csproj --no-build -c Release -r ${{ matrix.runtime }} --self-contained false /p:PublishSingleFile=true

      - name: Prepare release artifacts
        run: |
          mkdir -p "${{ github.workspace }}/artifacts/${{ matrix.runtime }}"
          if [ "${{ matrix.runtime }}" = "win-x64" ]; then
            cp "${{ github.workspace }}/RcloneFileWatcherCore/bin/Release/net8.0/win-x64/publish/*.exe" "${{ github.workspace }}/artifacts/${{ matrix.runtime }}/"
          else
            cp "${{ github.workspace }}/RcloneFileWatcherCore/bin/Release/net8.0/linux-x64/publish/RcloneFileWatcherCore" "${{ github.workspace }}/artifacts/${{ matrix.runtime }}/"
            chmod +x "${{ github.workspace }}/artifacts/${{ matrix.runtime }}/RcloneFileWatcherCore"
          fi
          cp "${{ github.workspace }}/RcloneFileWatcherCore/bin/Release/net8.0/${{ matrix.runtime }}/publish/version.json" "${{ github.workspace }}/artifacts/${{ matrix.runtime }}/"
          
          # Create archive
          cd "${{ github.workspace }}/artifacts/${{ matrix.runtime }}"
          if [ "${{ matrix.runtime }}" = "win-x64" ]; then
            Compress-Archive -Path * -DestinationPath "../app-${{ matrix.runtime }}.zip"
          else
            zip -r "../app-${{ matrix.runtime }}.zip" *
          fi
        shell: bash

      - name: Extract version from assembly
        id: extract_version
        run: |
          if [ "${{ matrix.runtime }}" = "win-x64" ]; then
            assemblyPath="${{ github.workspace }}/RcloneFileWatcherCore/bin/Release/net8.0/win-x64/publish/RcloneFileWatcherCore.exe"
          else
            assemblyPath="${{ github.workspace }}/RcloneFileWatcherCore/bin/Release/net8.0/linux-x64/publish/RcloneFileWatcherCore"
          fi
          
          # Use dotnet to get version information
          version=$(dotnet --info | grep -oP '8\.\d+\.\d+')
          echo "Using assembly: $assemblyPath"
          echo "version=0.8.$(( $(date +%-j) )).$(( $(date +%-H) ))" >> $GITHUB_OUTPUT
        shell: bash
        if: matrix.runtime == 'win-x64'  # Only run once for Windows build

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ matrix.runtime }}
          path: ${{ github.workspace }}/artifacts/app-${{ matrix.runtime }}.zip

  create_release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ${{ github.workspace }}/artifacts

      - name: Generate changelog
        id: changelog
        run: |
          git fetch --tags
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$latest_tag" ]; then
            echo "No previous tag found, including full history" >&2
            log=$(git log --pretty=format:"- %s [%h] by %an" | grep -E '^- (feat|fix|BREAKING CHANGE):')
          else
            echo "Generating changelog since $latest_tag" >&2
            log=$(git log "$latest_tag"..HEAD --pretty=format:"- %s [%h] by %an" | grep -E '^- (feat|fix|BREAKING CHANGE):')
          fi
          
          {
            echo "changelog<<EOF"
            echo "$log"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.build.outputs.version }}
          name: Release ${{ needs.build.outputs.version }}
          body: |
            ### Changes since last release
            ${{ steps.changelog.outputs.changelog }}
            ### Assembly Version
            `${{ needs.build.outputs.version }}`
          files: |
            artifacts/app-win-x64.zip
            artifacts/app-linux-x64.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
