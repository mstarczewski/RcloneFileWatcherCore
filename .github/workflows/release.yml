name: Build & Release

on:
  push:
    tags:
      - 'v*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Optional tag name'
        required: false
        default: ''

jobs:
  build-windows:
    runs-on: windows-latest
    env:
      Configuration: Release

    steps:
      - name: Checkout repo with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore
        run: dotnet restore

      - name: Build solution
        run: dotnet build --no-restore -c ${{ env.Configuration }}

      - name: Run tests
        run: dotnet test RcloneFileWatcherCore.Tests/RcloneFileWatcherCore.Tests.csproj --no-build -c ${{ env.Configuration }}

      - name: Publish Windows app
        run: dotnet publish RcloneFileWatcherCore/RcloneFileWatcherCore.csproj --no-build -c Release -r win-x64 --self-contained false /p:PublishSingleFile=true

      - name: Prepare Windows artifacts
        run: |
          mkdir "${{ github.workspace }}\artifacts\win-x64"
          copy "${{ github.workspace }}\RcloneFileWatcherCore\bin\Release\net8.0\win-x64\publish\*.exe" "${{ github.workspace }}\artifacts\win-x64\"
          copy "${{ github.workspace }}\RcloneFileWatcherCore\bin\Release\net8.0\win-x64\publish\version.json" "${{ github.workspace }}\artifacts\win-x64\"
          Compress-Archive -Path "${{ github.workspace }}\artifacts\win-x64\*" -DestinationPath "${{ github.workspace }}\artifacts\app-win-x64.zip"

      - name: Extract version from Windows assembly
        id: extract_version
        run: |
          $assemblyPath = "${{ github.workspace }}\RcloneFileWatcherCore\bin\Release\net8.0\win-x64\publish\RcloneFileWatcherCore.exe"
          $version = [System.Diagnostics.FileVersionInfo]::GetVersionInfo($assemblyPath).ProductVersion
          echo "Extracted version: $version"
          echo "version=$version" >> $env:GITHUB_OUTPUT
        shell: powershell

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-win-x64
          path: ${{ github.workspace }}/artifacts/app-win-x64.zip

  build-linux:
    runs-on: ubuntu-latest
    env:
      Configuration: Release

    steps:
      - name: Checkout repo with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore
        run: dotnet restore

      - name: Build solution
        run: dotnet build --no-restore -c ${{ env.Configuration }}

      - name: Run tests
        run: dotnet test RcloneFileWatcherCore.Tests/RcloneFileWatcherCore.Tests.csproj --no-build -c ${{ env.Configuration }}

      - name: Publish Linux app
        run: dotnet publish RcloneFileWatcherCore/RcloneFileWatcherCore.csproj --no-build -c Release -r linux-x64 --self-contained false /p:PublishSingleFile=true

      - name: Prepare Linux artifacts
        run: |
          mkdir -p "${{ github.workspace }}/artifacts/linux-x64"
          cp "${{ github.workspace }}/RcloneFileWatcherCore/bin/Release/net8.0/linux-x64/publish/RcloneFileWatcherCore" "${{ github.workspace }}/artifacts/linux-x64/"
          cp "${{ github.workspace }}/RcloneFileWatcherCore/bin/Release/net8.0/linux-x64/publish/version.json" "${{ github.workspace }}/artifacts/linux-x64/"
          chmod +x "${{ github.workspace }}/artifacts/linux-x64/RcloneFileWatcherCore"
          cd "${{ github.workspace }}/artifacts/linux-x64" && zip -r "../app-linux-x64.zip" .

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-linux-x64
          path: ${{ github.workspace }}/artifacts/app-linux-x64.zip

  create_release:
    needs: [build-windows, build-linux]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ${{ github.workspace }}/artifacts

      - name: Generate changelog
        id: changelog
        run: |
          git fetch --tags
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$latest_tag" ]; then
            echo "No previous tag found, including full history" >&2
            log=$(git log --pretty=format:"- %s [%h] by %an" | grep -E '^- (feat|fix|BREAKING CHANGE):')
          else
            echo "Generating changelog since $latest_tag" >&2
            log=$(git log "$latest_tag"..HEAD --pretty=format:"- %s [%h] by %an" | grep -E '^- (feat|fix|BREAKING CHANGE):')
          fi
          
          {
            echo "changelog<<EOF"
            echo "$log"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.build-windows.outputs.version }}
          name: Release ${{ needs.build-windows.outputs.version }}
          body: |
            ### Changes since last release
            ${{ steps.changelog.outputs.changelog }}
            ### Assembly Version
            `${{ needs.build-windows.outputs.version }}`
          files: |
            artifacts/app-win-x64.zip
            artifacts/app-linux-x64.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
