name: Build & Release

on:
  push:
    tags:
      - 'v*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Optional tag name'
        required: false
        default: ''

jobs:
  build:
    runs-on: windows-latest
    env:
      Configuration: Release
      RuntimeId: win-x64

    steps:
      - name: Checkout repo with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore
        run: dotnet restore

      - name: Build solution
        run: dotnet build --no-restore -c ${{ env.Configuration }}

      - name: Run tests
        shell: bash
        run: dotnet test RcloneFileWatcherCore.Tests/RcloneFileWatcherCore.Tests.csproj --no-build -c ${{ env.Configuration }}

      - name: Publish app
        run: dotnet publish RcloneFileWatcherCore/RcloneFileWatcherCore.csproj --no-build -c Release -r win-x64 --self-contained false /p:PublishSingleFile=true

      - name: Prepare release artifacts
        run: |
          mkdir "${{ github.workspace }}\artifacts"
          copy "${{ github.workspace }}\RcloneFileWatcherCore\bin\Release\net8.0\win-x64\publish\*.exe" "${{ github.workspace }}\artifacts\"
          Compress-Archive -Path "${{ github.workspace }}\artifacts\*" -DestinationPath "${{ github.workspace }}\artifacts\app.zip"

      - name: Extract version from assembly
        id: extract_version
        run: |
          $assemblyPath = "${{ github.workspace }}\RcloneFileWatcherCore\bin\Release\net8.0\win-x64\publish\RcloneFileWatcherCore.exe"
          $version = [System.Diagnostics.FileVersionInfo]::GetVersionInfo($assemblyPath).ProductVersion
          echo "Extracted version: $version"
          echo "version=$version" >> $env:GITHUB_OUTPUT
        shell: powershell

      - name: Generate changelog
        id: changelog
        run: |
          git fetch --tags
          latest_tag=$(git describe --tags --abbrev=0 || echo "")
          
          if [ -z "$latest_tag" ]; then
            # Brak tagów - pokaż wszystkie commity
            changelog=$(git log --reverse --pretty=format:"- %s [%h] by %an")
          else
            # Pobierz commity od ostatniego tagu
            changelog=$(git log --reverse --pretty=format:"- %s [%h] by %an" $latest_tag..HEAD)
          fi
          
          # Zapisujemy do pliku zamiast do outputu
          echo "$changelog" > CHANGELOG.txt
          cat CHANGELOG.txt
        shell: bash

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.extract_version.outputs.version }}
          name: Release ${{ steps.extract_version.outputs.version }}
          body: |
            ### Changes since last release
            ${{ contents('./CHANGELOG.txt') }}

            ### Assembly Version
            `${{ steps.extract_version.outputs.version }}`
          files: |
            artifacts/*.exe
            artifacts/app.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
