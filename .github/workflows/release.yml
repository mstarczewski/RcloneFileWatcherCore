name: Build & Release

on:
  push:
    tags:
      - 'v*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: ''
        required: false
        default: ''

jobs:
  build:
    runs-on: windows-latest
    env:
      Configuration: Release
      RuntimeId: win-x64

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore
        run: dotnet restore

      - name: Build solution
        run: dotnet build --no-restore -c ${{ env.Configuration }}

      - name: Run tests
        shell: bash
        run: dotnet test RcloneFileWatcherCore.Tests/RcloneFileWatcherCore.Tests.csproj --no-build -c ${{ env.Configuration }}

      - name: Publish app
        run: dotnet publish RcloneFileWatcherCore/RcloneFileWatcherCore.csproj --no-build -c Release -r win-x64 --self-contained false /p:PublishSingleFile=true

      - name: List publish dir
        run: |
          Get-ChildItem -Recurse "${{ github.workspace }}" | Where-Object { $_.Name -match "RcloneFileWatcherCore.dll" }
        shell: pwsh
          

      - name: Prepare release artifacts
        run: |
          mkdir "${{ github.workspace }}\artifacts"
          copy "${{ github.workspace }}\RcloneFileWatcherCore\bin\Release\net8.0\win-x64\publish\*.exe" "${{ github.workspace }}\artifacts\"
          Compress-Archive -Path "${{ github.workspace }}\artifacts\*" -DestinationPath "${{ github.workspace }}\artifacts\app.zip"

      - name: Locate DLL with version info
        id: version
        shell: pwsh
        run: |
          $dll = Get-ChildItem -Path ${{ github.workspace }} -Recurse -Filter "RcloneFileWatcherCore.dll" |
            Where-Object { $_.FullName -like "*bin\\Release\\net8.0\\win-x64\\RcloneFileWatcherCore.dll" } |
            Select-Object -First 1

          if (-not $dll) {
            throw "Could not find RcloneFileWatcherCore.dll"
          }

          $version = [System.Diagnostics.FileVersionInfo]::GetVersionInfo($dll.FullName).ProductVersion
          echo "Read version: $version"
          echo "version=$version" >> $env:GITHUB_OUTPUT




      - name: Create Git tag for version
        if: github.event_name == 'workflow_dispatch'
        shell: bash
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag ${{ steps.version.outputs.version }}
          git push origin ${{ steps.version.outputs.version }}

      - name: Get previous tag
        id: previous_tag
        shell: bash
        run: |
          git fetch --tags
          latest=$(git tag --sort=-creatordate | grep -v "${{ steps.version.outputs.version }}" | head -n 1)
          echo "Previous tag: $latest"
          echo "previous=$latest" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        shell: bash
        run: |
          log=$(git log ${{ steps.previous_tag.outputs.previous }}..HEAD --pretty=format:"- %s (%an)")
          echo "log<<EOF" >> $GITHUB_OUTPUT
          echo "$log" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: ${{ steps.version.outputs.version }}
          body: ${{ steps.changelog.outputs.log }}
          files: |
            artifacts/*.exe
            artifacts/app.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
